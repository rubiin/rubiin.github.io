{"componentChunkName":"component---src-templates-post-js","path":"/blog/typeof-and-lookup-type-in-typescript/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>The <code class=\"language-text\">typeof</code> key can be used to extract type from an existing data</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rubin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kathmandu\"</span>\n<span class=\"token punctuation\">}</span>\n\ntype UserType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> user  <span class=\"token comment\">//  {name: string,age:number,address: string}</span></code></pre></div>\n<ul>\n<li>Look up types on the other hand are used to extract a portion from a complex type and create a new type</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type requestType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">roles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">edit</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">read</span><span class=\"token operator\">:</span> boolean\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// if we want to use type of  params as a type then</span>\n\ntype Params <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"params\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//  {id: number,type: string }</span>\ntype Roles <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"payload\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"roles\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//   roles: {edit: boolean,create: boolean,read: boolean}</span>\n</code></pre></div>","excerpt":"The  key can be used to extract type from an existing data Look up types on the other hand are used to extract a portion from a complex typeâ€¦","tableOfContents":"","frontmatter":{"title":"Typeof and lookup type in typescript","date":"2022-05-02T00:00:00.000Z","slug":"/blog/typeof-and-lookup-type-in-typescript/","tags":["typescript","types"],"cover_image":{"publicURL":"/static/7a20d26cd194411d9b02ffaf8e408ac0/cover.png"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}