{"componentChunkName":"component---src-templates-post-js","path":"/blog/typeof-and-lookup-type-in-typescript/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>In TypeScript, the typeof operator is used to obtain the type of a variable or property at compile time. It can be employed to create type aliases based on existing values or objects, ensuring type consistency. For example, if you have a variable const user = { name: 'Alice', age: 25 };, using typeof user will create a type that matches the shape of the user object, helping to enforce that other variables conform to the same structure.</p>\n<p>Lookup types, or indexed access types, allow you to access the type of a specific property within an object type. By using the syntax Type[Key], where Type is an object type and Key is a property name, you can extract the type of a specific property. For instance, if you have a type Person with a property age, Person['age'] will yield the type of the age property. This feature is useful for creating more dynamic and flexible types based on the structure of existing types.</p>\n<h2 id=\"typeof-in-typescript\" style=\"position:relative;\"><a href=\"#typeof-in-typescript\" aria-label=\"typeof in typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typeof in typescript</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rubin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kathmandu\"</span>\n<span class=\"token punctuation\">}</span>\n\ntype UserType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> user  <span class=\"token comment\">//  {name: string,age:number,address: string}</span></code></pre></div>\n<h2 id=\"lookup-type-in-typescript\" style=\"position:relative;\"><a href=\"#lookup-type-in-typescript\" aria-label=\"lookup type in typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lookup type in typescript</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type requestType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">roles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">edit</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">read</span><span class=\"token operator\">:</span> boolean\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// if we want to use type of  params as a type then</span>\n\ntype Params <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"params\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//  {id: number,type: string }</span>\ntype Roles <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"payload\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"roles\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//   roles: {edit: boolean,create: boolean,read: boolean}</span>\n</code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>In TypeScript, typeof and lookup types enhance type safety and flexibility. The typeof operator allows you to create types based on existing values, ensuring consistency and reducing errors. Lookup types enable you to access and use the type of specific properties within an object, providing a way to build dynamic and reusable type definitions. Together, these features help streamline type management and improve code reliability by leveraging TypeScript's strong typing capabilities.</p>","excerpt":"Overview In TypeScript, the typeof operator is used to obtain the type of a variable or property at compile time. It can be employed toâ€¦","tableOfContents":"<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#typeof-in-typescript\">Typeof in typescript</a></li>\n<li><a href=\"#lookup-type-in-typescript\">Lookup type in typescript</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Typeof and lookup type in typescript","date":"2022-05-02T00:00:00.000Z","slug":"/blog/typeof-and-lookup-type-in-typescript/","tags":["typescript","types"],"cover_image":{"publicURL":"/static/315ca8477c7051ec9bfc136dbd58a4ac/cover.webp"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}