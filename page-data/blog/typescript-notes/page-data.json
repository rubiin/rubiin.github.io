{"componentChunkName":"component---src-templates-post-js","path":"/blog/typescript-notes/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>unknown type functions like any but does not allow the data method to be called\nTypescript would throw a compile time error as we are using string function without type assertion. To fix it, the correct code would look like</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>to check null/undefined use, ==\neg.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// check for both null and undefined</span></code></pre></div>\n<ul>\n<li>intersection types (&#x26;) behaves like inheritance in classes meaning the attributes of one type is inherited by another type without causing duplication</li>\n</ul>\n<ul>\n<li>example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Point2d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype Point3d <span class=\"token operator\">=</span> Point2d <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p1</span><span class=\"token operator\">:</span> Point2d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p2</span><span class=\"token operator\">:</span> Point3d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>point 3D has all the members of point 2D plus member z. All members in intersection types are required. Not passing \"z\" on Point3D type will cause error</p>\n<ul>\n<li>Union type is defined by pipe operator \"|\". It means the type can either be the single types or their combination. All property of combination are optional</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">b1</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype UnionAB <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">unionAB1</span><span class=\"token operator\">:</span> UnionAB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">unionAB2</span><span class=\"token operator\">:</span> UnionAB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">unionAB3</span><span class=\"token operator\">:</span> UnionAB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">b1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Error</span>\n<span class=\"token comment\">// Property 'a1' does not exist on type 'B'.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unionAB3<span class=\"token punctuation\">.</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">unionAB4</span><span class=\"token operator\">:</span> UnionAB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Error</span>\n<span class=\"token comment\">// Property 'b1' does not exist on type 'UnionAB'.</span>\n<span class=\"token comment\">// Property 'b1' does not exist on type 'A'.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unionAB4<span class=\"token punctuation\">.</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// Error</span>\n<span class=\"token comment\">// Type '{ a1: string; b2: string; }' is not assignable to type 'UnionAB'.</span>\n<span class=\"token comment\">// Property 'b1' is missing in type '{ a1: string; b2: string; }' but required in type 'B'.</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">unionAB5</span><span class=\"token operator\">:</span> UnionAB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a1</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b2</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>optional variables in a type are annotated with \"?\" . This means the values may or may not be passed. works on class variables as well\nexample:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type PointXd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">;</span>\n  z<span class=\"token operator\">?</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p1</span><span class=\"token operator\">:</span> PointXd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p2</span><span class=\"token operator\">:</span> PointXd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Literal Types - This feature permits you to create a set of relationship values.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Direction <span class=\"token operator\">=</span> <span class=\"token string\">\"North\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"South\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"East\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"West\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Literal types in this case create also a Type Guard of your field, so the compiler can detect your errors or your typos</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">directionError</span><span class=\"token operator\">:</span> Direction <span class=\"token operator\">=</span> <span class=\"token string\">\"east\"</span> <span class=\"token comment\">// Type '\"east\"' is not assignable to type 'Direction'</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">direction</span><span class=\"token operator\">:</span> Direction <span class=\"token operator\">=</span> <span class=\"token string\">\"East\"</span> <span class=\"token comment\">// OK</span>\n</code></pre></div>\n<ul>\n<li>keyof operator helps us to extract the object's properties such as Literal-types</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype PersonKeys <span class=\"token operator\">=</span> keyof Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"age\" | \"phone\"</span>\n\nusage <span class=\"token keyword\">with</span> <span class=\"token keyword\">in</span> operator to <span class=\"token keyword\">set</span> all fields to number\n\ntype Student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof Person<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">student</span><span class=\"token operator\">:</span> Student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1252672\"</span>    <span class=\"token comment\">// Type 'string' is not assignable to type 'number'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>\n<p>disciminated types\nexample</p>\n</li>\n<li>\n<p>Not null assertion can be made using \"!\" operator.\nexample: <a href=\"https://dev.to/this-is-learning/typescript-tips-tricks-non-null-assertion-operator-21eb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/this-is-learning/typescript-tips-tricks-non-null-assertion-operator-21eb</a></p>\n</li>\n<li>\n<p>Interface and type are somewhat same but types offer much feature . &#x26; can be replaced with extends for interface</p>\n</li>\n<li>\n<p>Interface supports declaration merging which is same as union in types . if two interfaces with same name exist then their body is merged\nexample:</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// merged into a single Person interface</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>see never type</li>\n<li>when class implements type/interface , it should have all the attributes mentioned in the interface/types . It acts a blueprint\nexample:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Error below: Type 'Student' is missing the following properties from type 'Person': age, phone</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre></div>\n<ul>\n<li>definitive assignment(!) is used to tell typescript that the value will be defined and it is upto you to make sure its defined.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> string\n\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  person <span class=\"token operator\">=</span> <span class=\"token string\">\"rubin\"</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// error TS2454: Variable 'person' is used before being assigned.</span>\n\nEven though person is initialized inside the test <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> typescript doesnot know <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>\nTo tell typescript that <span class=\"token keyword\">this</span> value will always be non <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>  add <span class=\"token string\">\"!\"</span> and the error goes away\n\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">!</span><span class=\"token operator\">:</span> string\n\n\n</code></pre></div>\n<ul>\n<li>Type guards are used with \"is\" keyword and used to assert if a value is of certain type.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Rectangle <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">breadth</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n\ntype Square <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\ntype Shape <span class=\"token operator\">=</span> Rectangle <span class=\"token operator\">|</span> Square<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isRectangle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> shape is Rectangle <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"length\"</span> <span class=\"token keyword\">in</span> shape <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"breadth\"</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> shape is Square<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"size\"</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRectangle</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>breadth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSquare</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>size <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n\nHere we are telling typescript <span class=\"token keyword\">if</span> the <span class=\"token keyword\">function</span> returns <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nthe value is <span class=\"token keyword\">of</span> type <span class=\"token string\">\"Person\"</span>\n\n\n<span class=\"token literal-property property\">Notice</span><span class=\"token operator\">:</span> the guard can also be defined <span class=\"token keyword\">as</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"size\"</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nHowever typescript wont know the shape is <span class=\"token string\">\"Square\"</span> even <span class=\"token keyword\">if</span> it returns <span class=\"token boolean\">true</span>\nso its best to use the above <span class=\"token keyword\">for</span> type checking\n\n\n</code></pre></div>\n<ul>\n<li>An abstract class is typically used to define common behaviors for derived classes to extend. Unlike a regular class, an abstract class cannot be instantiated directly. The unimplemented methods are to be implemented and defined by the classes that extends it</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">{</span>\n abstract <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Console\"</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n<li>Object in js can be accessed with index-signature i.e Obj[key] similar to array . In typescript we can define the type of the index while accessing the object values</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p1</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">'alex123'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'123 Main St.'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">p2</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">'ryan123'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'123 Main St.'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\ntype PersonDictionary<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">persons</span><span class=\"token operator\">:</span> PersonDictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">alex</span><span class=\"token operator\">:</span> p1<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ryan</span><span class=\"token operator\">:</span> p2\n<span class=\"token punctuation\">}</span>\n\npersons<span class=\"token punctuation\">[</span><span class=\"token string\">'alex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> <span class=\"token string\">'alex567'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">[</span><span class=\"token string\">'alex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n<li>\n<p>Tuples are arrays with fixed length</p>\n</li>\n<li>\n<p>Generic constraints are used to require generic parameters to have a particular structure. If you don't specify them and try to access the data's property , typescript will throw error as it does not know the dats structure</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> addFullName <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fullName</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we have defined a parameter of type generic T. If we try to access, the properties of the parameter,\neven if it exists, we get error like <code class=\"language-text\"> Property 'lastName' does not exist on type 'T'</code>. We can fix this by adding generic constraints which tells typescript that the generic has those properties. Additionally, its also requiring the passed value to have properties <code class=\"language-text\">firstName</code> and <code class=\"language-text\">lastName</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type NamedVales <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> addFullName <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NamedVales</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fullName</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">typeof</code> key can be used to extract type from an existing data</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rubin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kathmandu\"</span>\n<span class=\"token punctuation\">}</span>\n\ntype UserType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> user  <span class=\"token comment\">//  {name: string,age:number,address: string}</span></code></pre></div>\n<p>-Look up types are used to extract a portion from a complex type and create a new type</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type requestType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">roles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">edit</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">read</span><span class=\"token operator\">:</span> boolean\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// if we want to use type of  params as a type then</span>\n\ntype Params <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"params\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//  {id: number,type: string }</span>\ntype Roles <span class=\"token operator\">=</span> requestType<span class=\"token punctuation\">[</span><span class=\"token string\">\"payload\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"roles\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//   roles: {edit: boolean,create: boolean,read: boolean}</span>\n</code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>TypeScript enhances JavaScript development by introducing static types, which help catch errors early in the development process and improve code maintainability. By providing a type system, it allows developers to define the structure of their code more clearly, enabling better collaboration and understanding in larger codebases.</p>","excerpt":"unknown type functions like any but does not allow the data method to be called\nTypescript would throw a compile time error as we are using…","tableOfContents":"<ul>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Typescript notes","date":"2022-05-07T00:00:00.000Z","slug":"/blog/typescript-notes/","tags":["typescript"],"cover_image":{"publicURL":"/static/7a20d26cd194411d9b02ffaf8e408ac0/cover.png"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}