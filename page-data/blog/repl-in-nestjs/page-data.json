{"componentChunkName":"component---src-templates-post-js","path":"/blog/repl-in-nestjs/","result":{"data":{"markdownRemark":{"html":"<p>One of the features of Nestjs is the REPL (Read-Eval-Print Loop) mode, a powerful tool that allows you to interactively test and execute code within the context of your NestJS application. This is particularly useful for quick experimentation, testing services, or debugging from the terminal. Here’s a step-by-step guide on how to use the REPL mode in NestJS:</p>\n<p>create a new file <code class=\"language-text\">repl.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> existsSync<span class=\"token punctuation\">,</span> mkdirSync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:path\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Logger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> repl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> replServer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">repl</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// OPTIONAL: sets up persistent history file for repl,</span>\n  <span class=\"token keyword\">const</span> cacheDirectory <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>cacheDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span>cacheDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  replServer<span class=\"token punctuation\">.</span><span class=\"token function\">setupHistory</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>cacheDirectory<span class=\"token punctuation\">,</span> <span class=\"token string\">\".nestjs_repl_history\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you can run the app in repl mode with :</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">npm</span> run start -- <span class=\"token parameter variable\">--entryFile</span> repl</code></pre></div>\n<p>Even better, add a script on your <code class=\"language-text\">package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"start:repl\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"npm run start -- --entryFile repl\"</span></code></pre></div>\n<p>It will initiate an interactive server, from which you can easily access your nest app methods by getting them either as</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">get<span class=\"token punctuation\">(</span>AppService<span class=\"token punctuation\">)</span>.getAllPosts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token variable\"><span class=\"token variable\">$(</span>AppService<span class=\"token variable\">)</span></span>.getAllPosts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can also navigate with the command history with ↕️ arrow keys</p>\n<p>Read more at the <a href=\"https://docs.nestjs.com/recipes/repl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official documentation</a></p>","excerpt":"One of the features of Nestjs is the REPL (Read-Eval-Print Loop) mode, a powerful tool that allows you to interactively test and execute…","tableOfContents":"","frontmatter":{"title":"REPL in Nestjs","date":"2024-07-14","slug":"/blog/repl-in-nestjs/","tags":["nestjs","repl","typescript"],"cover_image":{"publicURL":"/static/6d250c9d2b875de5b5374658fa0eaf7b/repl.gif"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}