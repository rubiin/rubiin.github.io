{"componentChunkName":"component---src-templates-post-js","path":"/blog/unknown-type-in-typescript/","result":{"data":{"markdownRemark":{"html":"<p>The <code class=\"language-text\">unknown</code> type in typescript is a common type that you will likely to come across. It is a strict version of the\n<code class=\"language-text\">any</code> type and in terms of accepting data, it accepts any data type which is similar to nature of <code class=\"language-text\">any</code> type. However\nthere is a minor differences between them. Since an <code class=\"language-text\">unknown</code> type also can have multiple type, it forces to use type assertion before using the types function. To further clear , lets look an example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, we are using <code class=\"language-text\">any</code> type for the value. Since trim is a string function, this works well for string data. However on supplying numbers or booleans , we get a runtime error</p>\n<p>The same example using <code class=\"language-text\">unknown</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// typescript error at this line</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Typescript would throw a compile time error as we are using string function without type assertion. To fix it, the correct code would look like</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"The  type in typescript is a common type that you will likely to come across. It is a strict version of the\n type and in terms of acceptingâ€¦","tableOfContents":"","frontmatter":{"title":"Unknown type in typescript","date":"2022-04-25T00:00:00.000Z","slug":"/blog/unknown-type-in-typescript/","tags":["typescript","types","javascript"],"cover_image":{"publicURL":"/static/7a20d26cd194411d9b02ffaf8e408ac0/cover.png"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}