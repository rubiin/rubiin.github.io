{"componentChunkName":"component---src-templates-post-js","path":"/blog/unknown-type-in-typescript/","result":{"data":{"markdownRemark":{"html":"<p>The <code class=\"language-text\">unknown</code> type in typescript is a common type that you will likely to come across. It is a strict version of the\n<code class=\"language-text\">any</code> type and in terms of accepting data, it accepts any data type which is similar to nature of <code class=\"language-text\">any</code> type. However\nthere is a minor differences between them. Since an <code class=\"language-text\">unknown</code> type also can have multiple type, it forces to use type assertion before using the types function. To further clear , lets look an example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, we are using <code class=\"language-text\">any</code> type for the value. Since trim is a string function, this works well for string data. However on supplying numbers or booleans , we get a runtime error</p>\n<p>The same example using <code class=\"language-text\">unknown</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// typescript error at this line</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Typescript would throw a compile time error as we are using string function without type assertion. To fix it, the correct code would look like</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">readAny</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>The unknown type in TypeScript provides a safe alternative to any, offering type safety while still allowing flexibility in dynamic programming. When a value is of type unknown, it forces developers to perform type checks before using the value, reducing the risk of runtime errors. This encourages more deliberate and safer code practices compared to any, which bypasses type checking. The unknown type is particularly useful in scenarios involving user input or third-party APIs, where the exact type may not be known at compile-time, making it a vital tool for maintaining type safety in uncertain conditions.</p>","excerpt":"The  type in typescript is a common type that you will likely to come across. It is a strict version of the\n type and in terms of acceptingâ€¦","tableOfContents":"<ul>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>","frontmatter":{"title":"Unknown type in typescript","date":"2022-04-25T00:00:00.000Z","slug":"/blog/unknown-type-in-typescript/","tags":["typescript","types","javascript"],"cover_image":{"publicURL":"/static/315ca8477c7051ec9bfc136dbd58a4ac/cover.webp"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}