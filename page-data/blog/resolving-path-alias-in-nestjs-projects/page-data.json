{"componentChunkName":"component---src-templates-post-js","path":"/blog/resolving-path-alias-in-nestjs-projects/","result":{"data":{"markdownRemark":{"html":"<p>Building a nestjs project in typescript is really awesome but as the project starts to grow , your directories will grow too thus making your imports lengthy like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../user/model\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Article <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../article/model\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Cache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../cache\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MongoDB <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../mongodb\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"path-mapping-to-the-rescue\" style=\"position:relative;\"><a href=\"#path-mapping-to-the-rescue\" aria-label=\"path mapping to the rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path mapping to the rescue!</h1>\n<p>TypeScript allows the use of path mapping which allows arbitrary module paths (that doesn’t start with “/” or “.”) to be specified and mapped to physical paths in the filesystem in the compiler options in tsconfig file like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@datorama/utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"app/utils/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@datorama/pipes/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"app/pipes/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    ...\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first property that we must add is the baseUrl property. Notice that paths are resolved relative to baseUrl .\nThe second property is the paths property. This tells the compiler for any module import that matches the pattern \"@datorama/utils/*\" , to look in the following location:</p>\n<h1 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h1>\n<p>When you run the code inline (during execution) , it works as intended but when you build it for production and try to run it, you get the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: Cannot find module '@datorama/utils'</code></pre></div>\n<p>The issue mentioned is of execution with node.Actually the problem occurs when executing the built files with node dist/main.js, not during the build process with tsc.</p>\n<h1 id=\"the-solution\" style=\"position:relative;\"><a href=\"#the-solution\" aria-label=\"the solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Solution</h1>\n<p>After doing some search on the problem, I came across multiple solutions.</p>\n<ul>\n<li><a href=\"https://github.com/dividab/tsconfig-paths-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using webpack</a></li>\n<li><a href=\"https://medium.com/@caludio/how-to-use-module-path-aliases-in-visual-studio-typescript-and-javascript-e7851df8eeaa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Module Aliases package</a></li>\n<li>Bootstrapping tsc with explicit params</li>\n</ul>\n<p>Although there are bunch of solutions above, the first and second one didn't work for me. So I went with the third one which was actually mentioned in the docs of <a href=\"https://github.com/dividab/tsconfig-paths\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tsconfig-paths</a> which nest uses to resolve these paths at runtime.</p>\n<p>To apply the solution, make a file named tsconfig-paths-bootstrap.js (The name is up to you) and copy/paste the below snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// tsconfig-paths-bootstrap.js</span>\n\n<span class=\"token keyword\">const</span> tsConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tsconfig.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tsConfigPaths <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tsconfig-paths\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Either absolute or relative path. If relative it's resolved to current working directory.</span>\ntsConfigPaths<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseUrl<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> tsConfig<span class=\"token punctuation\">.</span>compilerOptions<span class=\"token punctuation\">.</span>paths<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Build the dist file normally as you do with tsc. After that, you can run it with</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">node</span> <span class=\"token parameter variable\">-r</span> ./tsconfig-paths-bootstrap.js dist/main.js</code></pre></div>\n<blockquote>\n<p>Note: Check the file name with the filename in the command and you are good to go</p>\n</blockquote>\n<p>Shoutout to <a href=\"https://github.com/jmcdo29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jay McDoniel</a> for his help.</p>","excerpt":"Building a nestjs project in typescript is really awesome but as the project starts to grow , your directories will grow too thus making…","tableOfContents":"<ul>\n<li><a href=\"#path-mapping-to-the-rescue\">Path mapping to the rescue!</a></li>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#the-solution\">The Solution</a></li>\n</ul>","frontmatter":{"title":"Resolving path alias in nestjs projects","date":"2019-09-02","slug":"/blog/resolving-path-alias-in-nestjs-projects/","tags":["typescript","nodejs","nestjs"],"cover_image":{"publicURL":"/static/dd0a523bbeed8b7114dcc49b114a426f/cover.webp"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}