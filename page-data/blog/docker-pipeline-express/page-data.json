{"componentChunkName":"component---src-templates-post-js","path":"/blog/docker-pipeline-express/","result":{"data":{"markdownRemark":{"html":"<p>This post will guide you through how to setup docker for a express app on typescript. This also works for other frameworks besides express.\nThis post assumes you have used docker.\nWe will be using multi stage builds on docker as we have to\ncompile the express app before we can actually use it on production. For reference on multistage build, check it on here\n<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/develop/develop-images/multistage-build/</a></p>\n<p>In a nutshell, as the name suggest multistage build is nothing more than a docker file split into several stages , each stage creating an intermediate image and passing the result to the next step and so on. The main difference using multi stage build vs using single build for compiling and running an app is the final image size.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\">## this is the stage one , also know as the build step</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:12.17.0-alpine</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm run build</span>\n\n<span class=\"token comment\">## this is stage two , where the app actually runs</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:12.17.0-alpine</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install --only=production</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">0</span></span> /usr/src/app/dist ./dist</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 3000</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> npm start</span>\n</code></pre></div>\n<p>This is the dockerfile we will be using for building and running the app. Here we have defined two stages, one for compilation and another stage is for actually running the app.\nThe first stage code is nothing different from a typical nodejs dockerfile, the only difference is we are building or compiling the app with <code class=\"language-text\">npm run build </code> .Now emphasis on the second stage.\nThe important lines here are, we are only installing dependencies for production and also copying dist. The copy command here tells docker to copy the dist files from the build step on to the deployment stage.Then we are exposing the port like we usually do and atlast, running the npm command for starting the app.</p>\n<p>The full project can be found at:\n<a href=\"https://github.com/rubiin/dockerpipeline-with-typescript-express\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rubiin/dockerpipeline-with-typescript-express</a></p>","excerpt":"This post will guide you through how to setup docker for a express app on typescript. This also works for other frameworks besides expressâ€¦","tableOfContents":"","frontmatter":{"title":"Docker pipeline with Typescript + Express for production","date":"2022-06-08T00:00:00.000Z","slug":"/blog/docker-pipeline-express/","tags":["typescript","docker","express"],"cover_image":{"publicURL":"/static/812ea05bb9714b51961035df2eb90302/cover.png"}}}},"pageContext":{}},"staticQueryHashes":["3115057458"],"slicesMap":{}}