{"version":3,"file":"component---src-templates-tag-js-69ab8cd49bb99a0a76b7.js","mappings":"uMAOA,MAAM,OAAEA,EAAM,UAAEC,GAAcC,EAAAA,GAExBC,GAAsBC,EAAAA,EAAAA,SAAOC,EAAAA,IAAKC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,eAAZJ,CAAY,+OAQlCK,EAAAA,GAAOC,WAIPD,EAAAA,GAAOE,YAIMV,EAAUW,GAYVZ,EAAOa,WAITb,EAAOc,MACHb,EAAUc,IAiE/B,UAvDoBC,IAAsC,IAArC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAUH,EAClD,MAAM,IAAEI,GAAQH,GACV,MAAEI,GAAUH,EAAKI,kBAEvB,OACEC,EAAAA,cAACC,EAAAA,GAAM,CAACL,SAAUA,GAChBI,EAAAA,cAACpB,EAAmB,KAClBoB,EAAAA,cAAA,QAAME,UAAU,cACdF,EAAAA,cAAA,QAAME,UAAU,SAAQ,KACxBF,EAAAA,cAACG,EAAAA,KAAI,CAACC,GAAG,SAAQ,cAGnBJ,EAAAA,cAAA,UACEA,EAAAA,cAAA,QAAME,UAAU,OAAM,qBACFF,EAAAA,cAAA,QAAME,UAAU,QAAO,IAAEL,IAE7CG,EAAAA,cAAA,YACEA,EAAAA,cAACG,EAAAA,KAAI,CAACC,GAAG,cAAa,mBAI1BJ,EAAAA,cAAA,MAAIE,UAAU,cACXJ,EAAMO,KAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,MAAEE,EAAK,KAAEC,EAAI,KAAEC,EAAI,KAAEC,GAASJ,EAAKK,YACzC,OACEZ,EAAAA,cAAA,MAAIa,IAAKJ,GACPT,EAAAA,cAAA,UACEA,EAAAA,cAACG,EAAAA,KAAI,CAACC,GAAIK,GAAOD,IAEnBR,EAAAA,cAAA,KAAGE,UAAU,YACXF,EAAAA,cAAA,YACG,IAAIc,KAAKJ,GAAMK,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,MAAO,OACPC,IAAK,aAGTlB,EAAAA,cAAA,YAAM,OACLW,GACCA,EAAKQ,OAAS,GACdR,EAAKN,KAAI,CAACR,EAAKuB,IACbpB,EAAAA,cAACG,EAAAA,KAAI,CAACU,IAAKO,EAAGhB,GAAI,cAAciB,IAAUxB,MAASK,UAAU,OAAM,IAC/DL,MAIP,MAKN,C","sources":["webpack://rubiin.github.io/./src/templates/tag.js"],"sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Layout } from '@components';\nimport styled from 'styled-components';\nimport { theme, mixins, Main } from '@styles';\nconst { colors, fontSizes } = theme;\n\nconst StyledTagsContainer = styled(Main)`\n  max-width: 1000px;\n\n  span.tag {\n    font-size: 25px;\n  }\n\n  a {\n    ${mixins.inlineLink};\n  }\n\n  h1 {\n    ${mixins.flexBetween};\n    margin-bottom: 50px;\n\n    a {\n      font-size: ${fontSizes.lg};\n      font-weight: 400;\n    }\n  }\n\n  ul {\n    li {\n      font-size: 24px;\n      h2 {\n        font-size: inherit;\n        margin: 0;\n        a {\n          color: ${colors.lightSlate};\n        }\n      }\n      .subtitle {\n        color: ${colors.slate};\n        font-size: ${fontSizes.sm};\n\n        .tag {\n          margin-right: 5px;\n        }\n      }\n    }\n  }\n`;\n\nconst TagTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <Layout location={location}>\n      <StyledTagsContainer>\n        <span className=\"breadcrumb\">\n          <span className=\"arrow\">&larr;</span>\n          <Link to=\"/blog\">All posts</Link>\n        </span>\n\n        <h1>\n          <span className=\"tag\">\n            Showing Post From <span className=\"wavy\">#{tag}</span>\n          </span>\n          <span>\n            <Link to=\"/blog/tags\">View all tags</Link>\n          </span>\n        </h1>\n\n        <ul className=\"fancy-list\">\n          {edges.map(({ node }) => {\n            const { title, slug, date, tags } = node.frontmatter;\n            return (\n              <li key={slug}>\n                <h2>\n                  <Link to={slug}>{title}</Link>\n                </h2>\n                <p className=\"subtitle\">\n                  <time>\n                    {new Date(date).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                    })}\n                  </time>\n                  <span>&nbsp;&mdash;&nbsp;</span>\n                  {tags &&\n                    tags.length > 0 &&\n                    tags.map((tag, i) => (\n                      <Link key={i} to={`/blog/tags/${kebabCase(tag)}/`} className=\"tag\">\n                        #{tag}\n                      </Link>\n                    ))}\n                </p>\n              </li>\n            );\n          })}\n        </ul>\n      </StyledTagsContainer>\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nTagTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }),\n  location: PropTypes.object,\n};\n\nexport const pageQuery = graphql`\n  query ($tag: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            slug\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["colors","fontSizes","theme","StyledTagsContainer","styled","Main","withConfig","displayName","componentId","mixins","inlineLink","flexBetween","lg","lightSlate","slate","sm","_ref","pageContext","data","location","tag","edges","allMarkdownRemark","React","Layout","className","Link","to","map","_ref2","node","title","slug","date","tags","frontmatter","key","Date","toLocaleDateString","year","month","day","length","i","kebabCase"],"sourceRoot":""}