{"version":3,"file":"component---src-pages-blog-index-js-29631e9ec19d4e73ee17.js","mappings":"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","sources":["webpack://rubiin.github.io/./src/pages/blog/index.js"],"sourcesContent":["import { Layout, TagItem, Head } from \"@components\";\nimport config from \"@config\";\nimport { Button, Main, media, mixins, theme } from \"@styles\";\nimport { graphql, Link } from \"gatsby\";\nimport kebabCase from \"lodash/kebabCase\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nconst { colors, fontSizes, fonts } = theme;\n\nconst POST_TAGS = Object.freeze({\n  RECENT: \"Recent\",\n  FEATURED: \"Featured\",\n});\n\nconst StyledTagsContainer = styled.div`\n  width: 200px;\n  margin-top: 100px;\n  ${media.bigDesktop`display:none;`};\n  ${media.phablet`display: none;`};\n`;\n\nconst StyledMainContainer = styled(Main)`\n  & > header {\n    text-align: center;\n    margin-bottom: 100px;\n\n    a {\n      &:hover,\n      &:focus {\n        cursor:\n          url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='48' viewport='0 0 100 100' style='fill:black;font-size:24px;'><text y='50%'>⚡</text></svg>\")\n            20 0,\n          auto;\n      }\n    }\n  }\n\n  footer {\n    ${mixins.flexBetween};\n    margin-top: 20px;\n    width: 100%;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButtonContainer = styled.div`\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledFlex = styled.div`\n  margin-top: 20px;\n  display: flex;\n  width: inherit;\n  gap: 10%;\n  justify-content: space-around;\n\n  .posts {\n    display: flex;\n    flex-direction: column;\n    width: 80%;\n    gap: 0.5rem;\n  }\n`;\n\nconst StyledPostInner = styled.div`\n  ${mixins.boxShadow};\n  ${mixins.flexBetween};\n  flex-direction: column;\n  align-items: flex-start;\n  position: relative;\n  padding: 2rem 1.75rem;\n  height: 100%;\n  border-radius: ${theme.borderRadius};\n  transition: ${theme.transition};\n  background-color: ${colors.lightNavy};\n  header,\n  a {\n    width: 100%;\n  }\n`;\nconst StyledAllCategory = styled(Link)`\n  padding: 1rem;\n`;\n\nconst StyledPost = styled.div`\n  transition: ${theme.transition};\n  cursor: default;\n  &:hover,\n  &:focus {\n    outline: 0;\n    ${StyledPostInner} {\n      transform: translateY(-5px);\n    }\n  }\n`;\nconst StyledReadingTime = styled.span`\n  font-family: ${fonts.SFMono};\n  font-size: ${fontSizes.smish};\n  color: ${colors.lightSlate};\n`;\nconst StyledDate = styled(StyledReadingTime)`\n  text-transform: uppercase;\n`;\n\nconst StyledReadingTimeContainer = styled.div`\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n  justify-content: space-between;\n`;\n\nconst StyledPostHeader = styled.div`\n  ${mixins.flexBetween};\n  margin-bottom: 30px;\n`;\nconst StyledFolder = styled.div`\n  color: ${colors.green};\n  svg {\n    width: 40px;\n    height: 40px;\n  }\n`;\nconst StyledPostName = styled.h5`\n  margin: 0 0 10px;\n  font-size: ${fontSizes.xxl};\n  color: ${colors.lightestSlate};\n`;\nconst StyledPostDescription = styled.div`\n  font-size: 17px;\n  color: ${colors.lightSlate};\n`;\n\nconst StyledTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  a {\n    ${mixins.inlineLink};\n  }\n`;\n\nconst StyledToggleButton = styled(Button)`\n  padding: 0.5rem 0.7rem;\n  margin: 0.4rem;\n`;\n\nconst StyledMoreButton = styled(Button)`\n  margin: 40px 0;\n  padding: 1.25rem 10rem;\n  ${media.thone`padding:1.25rem 6rem;`};\n  ${media.thone`padding:1.25rem 4rem;`};\n  ${media.tiny`padding:1.25rem 4rem;`};\n`;\n\nconst StyledLatestPostHeader = styled.h1`\n    margin: 0  auto;\n    margin-bottom: 1rem;\n}\n`;\n\nconst BlogPage = ({ location, data }) => {\n  const group = data.allMarkdownRemark.group;\n  const GRID_LIMIT = 4;\n\n  const posts = data.allMarkdownRemark.edges;\n  const [toggleText, setToggleTxt] = useState(POST_TAGS.FEATURED);\n  const [postsToShow, setPostsToShow] = useState(posts.slice(0, GRID_LIMIT));\n\n  const handleToggle = () => {\n    // if toggleText is Featured, show featured posts\n    if (toggleText === POST_TAGS.FEATURED) {\n      setToggleTxt(POST_TAGS.RECENT);\n\n      setPostsToShow(\n        posts\n          .filter(({ node }) => node.frontmatter.featured)\n          .slice(0, GRID_LIMIT),\n      );\n    } else {\n      setPostsToShow(posts.slice(0, GRID_LIMIT));\n\n      setToggleTxt(POST_TAGS.FEATURED);\n    }\n  };\n\n  const sortTags = group\n    .sort((a, b) => {\n      return b.totalCount - a.totalCount;\n    })\n    .slice(0, GRID_LIMIT);\n\n  const showMore = () => {\n    if (toggleText === POST_TAGS.FEATURED) {\n      setPostsToShow(posts.slice(0, postsToShow.length + GRID_LIMIT));\n    } else {\n      setPostsToShow(\n        posts\n          .filter(({ node }) => node.frontmatter.featured === true)\n          .slice(0, postsToShow.length + GRID_LIMIT),\n      );\n    }\n  };\n\n  const options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\n\n  const meta = {\n    title: ` Blog | ${config.name}`,\n    siteUrl: location.href,\n    description: config.postPageDescription,\n  };\n\n  return (\n    <Layout location={location}>\n      <Head metadata={meta} />\n\n      <StyledMainContainer>\n        <StyledFlex>\n          <div className=\"posts\">\n            <StyledLatestPostHeader className=\"small-title wavy\">\n              {toggleText === POST_TAGS.FEATURED\n                ? POST_TAGS.RECENT\n                : POST_TAGS.FEATURED}{\" \"}\n              Posts\n            </StyledLatestPostHeader>\n\n            <StyledButtonContainer>\n              <StyledToggleButton onClick={() => handleToggle()}>\n                {toggleText}\n              </StyledToggleButton>\n            </StyledButtonContainer>\n\n            {posts.length > 0 &&\n              postsToShow.map(({ node }, i) => {\n                const { frontmatter, timeToRead, excerpt } = node;\n                const { title, slug, date, tags } = frontmatter;\n                const d = new Date(date);\n\n                return (\n                  <StyledPost key={i} tabIndex=\"0\">\n                    <StyledPostInner>\n                      <header>\n                        <Link to={slug}>\n                          <StyledPostHeader>\n                            <StyledFolder></StyledFolder>\n                          </StyledPostHeader>\n                          <StyledReadingTimeContainer>\n                            <StyledDate>{`📆 ${d.toLocaleDateString(\"en-us\", options)}`}</StyledDate>\n                            <StyledReadingTime>{`⏱️ ${timeToRead} min read`}</StyledReadingTime>\n                          </StyledReadingTimeContainer>\n                          <StyledPostName>{title}</StyledPostName>\n                          <StyledPostDescription>\n                            {excerpt}\n                          </StyledPostDescription>\n                        </Link>\n                      </header>\n                      <footer>\n                        <StyledTags>\n                          {tags.map((tag, i) => (\n                            <TagItem key={i} text={tag}></TagItem>\n                          ))}\n                        </StyledTags>\n                      </footer>\n                    </StyledPostInner>\n                  </StyledPost>\n                );\n              })}\n            <StyledButtonContainer>\n              <StyledMoreButton onClick={() => showMore()}>\n                Show More\n              </StyledMoreButton>\n            </StyledButtonContainer>\n          </div>\n          <StyledTagsContainer>\n            <h2 className=\"small-text\">Read more on</h2>\n            <ul className=\"fancy-list\">\n              {sortTags.map((tag) => (\n                <li key={tag.fieldValue}>\n                  <Link to={`/blog/tags/${kebabCase(tag.fieldValue)}/`}>\n                    {tag.fieldValue}{\" \"}\n                    <span className=\"count\">({tag.totalCount})</span>\n                  </Link>\n                </li>\n              ))}\n              <StyledAllCategory to={`/blog/tags`}>All tags</StyledAllCategory>\n            </ul>\n          </StyledTagsContainer>\n        </StyledFlex>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\n\nBlogPage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default BlogPage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/posts/\" }\n        frontmatter: { draft: { ne: true } }\n      }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            date\n            tags\n            draft\n            featured\n          }\n          excerpt\n          timeToRead\n        }\n      }\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"names":["colors","fontSizes","fonts","theme","POST_TAGS","Object","freeze","RECENT","FEATURED","StyledTagsContainer","styled","div","withConfig","displayName","componentId","media","bigDesktop","phablet","StyledMainContainer","Main","mixins","flexBetween","StyledButtonContainer","StyledFlex","StyledPostInner","boxShadow","borderRadius","transition","lightNavy","StyledAllCategory","Link","StyledPost","StyledReadingTime","span","SFMono","smish","lightSlate","StyledDate","StyledReadingTimeContainer","StyledPostHeader","StyledFolder","green","StyledPostName","h5","xxl","lightestSlate","StyledPostDescription","StyledTags","inlineLink","StyledToggleButton","Button","StyledMoreButton","thone","tiny","StyledLatestPostHeader","h1","_ref","location","data","group","allMarkdownRemark","posts","edges","toggleText","setToggleTxt","useState","postsToShow","setPostsToShow","slice","sortTags","sort","a","b","totalCount","options","year","month","day","meta","title","config","siteUrl","href","description","React","Layout","Head","metadata","className","onClick","filter","_ref2","node","frontmatter","featured","length","map","_ref4","i","timeToRead","excerpt","slug","date","tags","d","Date","key","tabIndex","to","toLocaleDateString","tag","TagItem","text","_ref3","fieldValue","kebabCase"],"sourceRoot":""}